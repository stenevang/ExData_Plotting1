write.csv(geo3, file="C:/Data/GeoLite2-City-CSV_20160202/GeoLite_Joined_deduped_export.csv", quote=FALSE, row.names=FALSE, col.names=TRUE)
geo4 <- geo3[order(city_name),]
geo4 <- geo3[order(geo3$city_name),]
write.csv(geo4, file="C:/Data/GeoLite2-City-CSV_20160202/GeoLite_Joined_deduped_export.csv", quote=FALSE, row.names=FALSE, col.names=TRUE)
?runif
geo4$filter <- runif(nrow(geo4), 0, nrow(geo4))
head(geo4)
tail(geo4)
write.csv(geo4, file="C:/Data/GeoLite2-City-CSV_20160202/GeoLite_Joined_deduped_export.csv", quote=FALSE, row.names=FALSE, col.names=TRUE)
library(Rserve)
Rserve()
library(swirl)
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins", "twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints > 7))
ints > 7
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
library(swirl)
swirl()
update.packages(checkBuilt=TRUE, ask=FALSE)
x <- 7
x
y <- 8
y+x
?sd
?c
install.packages("XLConnect")
install.packages("Rserve")
library(Rserve)
Rserve()
source('~/exampleRscript.R', echo=TRUE)
names(data)
head(data)
str(rowMeans)
str(quantile)
?quantile
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 1, quantile, probs = c(0.25, 0.75))
x <- matrix(1:1000, 10, 100)
x
apply(x, 1, quantile, probs = c(0.25, 0.75))
x <- matrix(1:100, 1, 100)
apply(x, 1, quantile, probs = c(0.25, 0.75))
x <- matrix(0:99, 1, 100)
apply(x, 1, quantile, probs = c(0.25, 0.75))
x <- matrix(0:100, 1, 101)
apply(x, 1, quantile, probs = c(0.25, 0.75))
y <- rep(1:100, each = 10)
y
str(rep=)
str(rep)
?rep
rep_len(1:100, length.out = 1000)
x <- rep_len(1:100, length.out = 1000)
x <- matrix(x, 10, 100)
x
y
head(y)
y <- rep_len(1:100, length.out = 1000)
head(y)
tail(y)
length(y)
head(y, 95:105)
y[95:105]
x <- matrix(y, 10, 100)
x
x <- matrix(y, 100, 10)
x
apply(x, 2, quantile, probs = c(0.25, 0.75))
str(array)
array
str(array)
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
?rowMeans
rowMeans(a, dims=1)
rowMeans(a, dims=3)
rowMeans(a, dims=2)
apply(a, c(1,2,3), mean)
str(gl)
?gl
x <- c(rnorm(10), runif(10), rnorm(10, 1)) # 30 values
f <- gl(3, 10) # generate factors with 3 levels and 10 replications in each level)
tapply(x, f, mean) # we calculate the mean for each of the groups as defined by the factors in f (the "group names" are 1, 2, and 3)
tapply(x, f, range)
as.matrix(tapply(x, f, range))
output <- matrix(unlist(tapply(x, f, range)), ncol = 2, byrow = TRUE)
output
runif(2)
mean(x)
traceback()
lm(y ~x)
traceback()
debug(lm)
lm(y~x)
options(error = recover)
read.csv("nosuchfile")
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list())
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
as.list(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
play()
str(flags)
summary(flags)
nxt()
sapply(flags, unieuq)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags@population, flags$red, summary)
ok()
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
sqrt(9699)
sqrt(9996)
sqrt(9998)
99.95^2
99.96^2
99.97^2
99.98^2
99.99^2
?'+'
?'%'
?'%%'
chicks <- c("s","u","c","k")
for (dicks in chicks) {}
for (dicks in chicks) {print(dicks) }
chicks <- "suck"
for (dicks in chicks) {print(dicks) }
floor(75.5)
?merge
x= c(0:9)
y= c(0:9)
merge(x,y)
m = merge(x,y)
typeof(m)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?ifelse
?round
?RServe
?kmeans
source('~/.active-rstudio-document', echo=TRUE)
View(cl)
View(data.frame(cl))
typeof(cl)
class(cl)
str(cl)
View(x)
typeof(x)
class(x)
cl
source('~/.active-rstudio-document', echo=TRUE)
?scale
x = c(10:20)
y = c(1100:1200)
test = cbind(x,y)
test
test2 <- scale(test)
View(test2)
source('~/.active-rstudio-document', echo=TRUE)
?plot
points(cl$centers, col = 1:6, pch = 8, cex = 2)
length(cl$cluster)
length(x)
dim(x)
intall.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(datasets)
?datasets
library(help = "datasets")
tit <- Titanic
View(tit)
?kmeans
source('~/.active-rstudio-document', echo=TRUE)
?XLConnect
library(XLConnect)
?XLCOnnect
??XLConnect
?loadWorkbook
x <- loadWorkbook("C:/Users/Public/ocuments/Datawatch Desktop/Data/StocksStatic.xls")
x <- loadWorkbook("C:/Users/Public/Documents/Datawatch Desktop/Data/StocksStatic.xls")
dim(x)
?readWorksheetFromFile
sheet <- readWorkbookFromFile("C:/Users/Public/Documents/Datawatch Desktop/Data/StocksStatic.xls", sheet = "Static")
sheet <- readWorksheetFromFile("C:/Users/Public/Documents/Datawatch Desktop/Data/StocksStatic.xls", sheet = "Static")
colnames(sheet)
colnames(sheet[,18])
names(sheet[,18])
sheet[,18]
str(sheet)
head(sheet[,18])
n <- colnames(sheet)
n
rm(n)
library(Rserve)
Rserve()
xy <- matrix(sheet[,26], sheet[,30], ncol=2)
x <- sheet[,26]
y <- sheet[,30]
xy <- matrix(x, y, ncol=2)
?MATRIX
?matrix
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(xy, col = result$cluster)
?scale
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?arrange
?sort
?left
?substr
?sub
?sub
?substr
substr("0013",-length("0013"),3)
substr("0013",-nchar("0013"),3)
?kmeans
?scale
test = data.frame(x=1:20, y=2001:2020)
test
scale(test)
d = scale(test)
typeof(d)
class(d)
d
?apply
?sapply
library(XLConnect)
?readWorksheet
?readWorksheetFromFile
?t
v = 1:10
v
t(V)
t(V)
t(v)
w <- t(v)
class(w)
?vapply
?is.numeric
?vapply
?kmeams
?kmeans
?as.integer
?kmeans
?scale
elseif
?elseif
as.character(10) > 9
as.character(10) < 9
?round
as.integer
?as.integer
?readWorksheet
?Devices
?ifexist
x <- 1
exists(x)
mtcars
exists(mtcars)
exists("mtcars")
exists("x")
library(XLConnect)
stocksstatic = loadWorkbook("C:/Users/Public/Documents/Datawatch Desktop/Data/StocksStatic.xls")
typeof(stocksstatic)
class(stocksstatic)
class(stocksstatic) == "workbook"
exists(stocksstatic) && class(stocksstatic)=="workbook"
exists("stocksstatic") && class(stocksstatic)=="workbook"
exists("stocksstatic") && class(stocksstatic)=="character"
?'&&'
stocksstatic <- 4
!exists("stocksstatic")
class(stocksstatic) != "workbook"
!exists("stocksstatic") && class(stocksstatic)!="workbook"
!exists("stocksstatic") | class(stocksstatic)!="workbook"
is.data.frame(stocksstatic)
!is.data.frame(stocksstatic)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
is.data.frame(data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?lm
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col= "green")
rug(ppm)
head(low)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
play()
write.csv(pollution, file="pollution.csv")
nxt()
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pollution, pm25~region, col="red")
boxplot(pm25~region, data="pollution", col="red")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, pollution$region == "east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution, pm25=="west)", col="green")
)
hist(subset(pollution, pm25=="west"), col="green")
hist(subset(pollution, region=="west"), col="green")
hist(subset(pollution$pm25, region=="west"), col="green")
hist(subset(pollution$pm25, pollution$region=="west"), col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(pm25 ~ latitude))
with(pollution, plot(pm25, latitude))
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollutions$latitude, pollutions$pm25, col=pollutions$region)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
swirl()
library(swirl)
swirl()
?Devices
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
bye()
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=T)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind~Ozone))
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$spin
par()$pin
par("fg")
par("pch")
play()
?pch
nxt()
par("lty")
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, airquality$Ozone, type ="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, month==5)
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", c(17,8), c("blue","red"), c("May","Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
abline(median(airquality$Wind), lty=2, lwt=2)
abline(median(airquality$Wind), lty=2, lwd=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar, main="Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3),mar=c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and weather in New York City", outer = TRUE)
mtext("Ozone and weather in New York City", outer = TRUE)
mtext("Ozone and Weather in New York City", outer = TRUE)
?unz
?read.table
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
ElectricPowerConsumptionData <- read.table(file=unz(temp, "household_power_consumption.txt"),
header=T,
sep=";",
na.strings="?",
colClasses=c("Date","character","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
unlink(temp)
EPCdata <- subset(ElectricPowerConsumptionData, Date > "2007-01-31" & Date < "2007-02-03")
}
setwd(previouswd)
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
library(data.table)
?fread
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
?unz
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
?fread
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
dir.create(tempzipdir)
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
tempzipdir
?tempfile
source('~/Git/DataScienceSpecialization/04_Exploratory_Data_Analysis/ExData_Plotting1/plot1.R', echo=TRUE)
